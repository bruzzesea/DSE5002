# sum two numbers
# if else to handle non-numeric values
if(is.numeric(num1)&is.numeric(num2)){
output <- (num1 + num2)
} else{
stop("ERROR: Both inputs must be numeric")
}
return(output) # return statement
}
my_sum3(num1="a",num2=4)
my_sum3(num1=3)
library(dplyr)
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
names(sales)
?renmae
?rename
sales %>% # the pipe  (%>%) allows you to write multi-line functions passing the same data to each line of code
rename(Row.ID = ï..Row.ID) %>%
slice_max(Row.ID) %>% #slice the rows with the maximum Row.ID (should be one row)
select(Row.ID) # select the single column Row.ID
library(dplyr)
library(dplyr)
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
names(sales)
?rename
sales %>% # the pipe  (%>%) allows you to write multi-line functions passing the same data to each line of code
rename(Row.ID = ï..Row.ID) %>%
slice_max(Row.ID) %>% #slice the rows with the maximum Row.ID (should be one row)
select(Row.ID)
sales %>%
group_by(Segment) %>%
summarize(sum_of_sales = sum(Sales))
#EX2
#multiple groups & multiple metrics
sales %>%
group_by(Segment,Category) %>%
summarize(sales=sum(Sales),
transactions = n(),
distinct_products = n_distinct(Product.Name),
average_transaction_sale = sum(sales) / n())
?str_split
stringr::str_split(sales$Customer.Name,' ',simplify = T)
### Mutate
sales <- sales %>%
mutate(Order.Date = as.Date(Order.Date,'%m/%d/%Y'),
Ship.Date = as.Date(Ship.Date, '%m/%d/%Y'),
First.Name = stringr::str_split(Customer.Name,' ',simplify = T)[,1], #must use string simplify = TRUE to properly split in mutate
Last.Name = stringr::str_split(Customer.Name, ' ',simplify = T)[,2] #must use string simplify = TRUE to properly split in mutate
)
sales$First.Name[1:5]
inherits(sales$Order.Date, 'Date')
###Joins and Unions
# data frame 1
df1 = data.frame(CustomerId = c(1:6), Product = c("Oven","Television","Mobile","WashingMachine","Lightings","Ipad"))
df1
# data frame 2
df2 = data.frame(CustomerId = c(2, 4, 6, 7, 8), State = c("California","Newyork","Santiago","Texas","Indiana"))
df2
left_df <- df1 %>%
left_join(df2,by='CustomerId')
left_df
right_df <- df1 %>%
right_join(df2,by='CustomerId')
right_df
#full join, all keys returned
full_df <- df1 %>%
full_join(df2,by='CustomerId')
full_df
#inner join, only matches on both returned
inner_df <- df1 %>%
inner_join(df2,by='CustomerId')
inner_df
#binding columns and rows (unions)
df1 %>% bind_cols(left_df)
#stacking data frames ( bind rows)
left_df %>% bind_rows(right_df)
library(tidyr)
#the relig_income dataset comes with the tidyr package
data(relig_income)
head(relig_income)
?pivot_longer
relig_long <- relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
head(relig_long)
#fish_ecounters also comes with the tidyr package
data(fish_encounters)
head(fish_encounters)
fish_wide <- fish_encounters %>%
pivot_wider(names_from = station, values_from = seen)
head(fish_wide)
fish_encounters %>%
pivot_wider(names_from = station, values_from = seen) %>%
drop_na()
wide_fish_na <- fish_encounters %>%
pivot_wider(names_from = station, values_from = seen) %>%
dplyr::mutate_at(c(4:12), ~replace_na(.,0))
head(wide_fish_na)
#or replace them
#simply drop them
#we need to use dplyr's mutate_at to select columns 4 to 12 and
#tidyr's replace_na to replace all of those columns with 0
wide_fish_na <- fish_encounters %>%
pivot_wider(names_from = station, values_from = seen) %>%
dplyr::mutate_at(c(5:12), ~replace_na(.,0))
head(wide_fish_na)
#or replace them
#simply drop them
#we need to use dplyr's mutate_at to select columns 4 to 12 and
#tidyr's replace_na to replace all of those columns with 0
wide_fish_na <- fish_encounters %>%
pivot_wider(names_from = station, values_from = seen) %>%
dplyr::mutate_at(c(8:12), ~replace_na(.,0))
head(wide_fish_na)
#splitting cells
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
sales <- sales %>%
separate(Customer.Name,
sep=' ',
into=c('First.Name','Last.Name')
,extra='merge')
head(data.frame(sales$First.Name[1:5],sales$Last.Name[1:5]))
#conversely, we can combine these columns back together
sales <- sales %>%
unite(col = 'Customer.Name', First.Name:Last.Name,sep='_')
head(sales$Customer.Name)
library(ggplot2)
library(dplyr)
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
#basic example
sales <- sales %>%
mutate(Order.Date = as.Date(Order.Date,'%m/%d/%Y'),
Ship.Date = as.Date(Ship.Date, '%m/%d/%Y')
)
#simple bar chart
ggplot(sales,aes(x=Category)) +
geom_bar()
?aes
#simple bar chart
sales %>%
ggplot(aes(x=Category)) +
geom_bar()
#axis labels & title with a custom scale & color
ggplot(sales,aes(x=Category,fill=Category)) +
geom_bar() +
labs(x='Categories',
y='Transactions',
title='Transactions by Category') +
scale_y_continuous(breaks=c(1500,2000,4000,6000))
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(Category.~) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 90)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 15)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_color_brewer(palette = "Blues")+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_fill_brewer(palette = "Blues")+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_color_continuous(palette = "Blues")+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
?scale_fill_continuous
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_color_continuous(type = "gradient")+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
?scale_colour_brewer
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_fill_brewer(palette = 1)+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_fill_brewer(palette = 2)+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_color_brewer(palette = 'reds')+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_color_brewer(palette = 1)+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
install.packages("caret")
getwd()
read.csv("\\r Project\\data.csv")
read.csv("\\R Project\\data.csv")
getwd()
library(readr)
data <- read_csv("R Project/data.csv")
View(data)
head(data)
str(data)
data$job_title <- factor(data$job_title)
str(data)
data[job_title == "Data Scientist",]
data[job_title == "Data Scientist",]
head(data)
data[job_title == "Data Scientist",]
data[work_year == 2020,]
data[work_year == 2020,]
head(data)
stats$job_title
data$job_title
data$job_title <- factor(data$job_title)
str(data)
data[data$job_title == "Data Scientist",]
[data$work_year == 2020] <- [data$work_year == 2020] * 1.047
[data$work_year == 2020] <- (data$work_year == 2020) * 1.047
data$job_title <- factor(data$job_title)
data$employment_type <- factor(data$employment_type)
data$employee_residence <- factor(data$employee_residence)
library(ggplot2)
histo <- ggplot(data = data, aes(x = salary_in_usd))
s + geom_histogram(binwidth=10)
histo <- ggplot(data = data, aes(x = salary_in_usd))
histo + geom_histogram(binwidth=10)
##historgram
histo <- ggplot(data = data, aes(x = salary_in_usd))
histo + geom_histogram(binwidth=10)
library(ggplot2)
ggplot(data=data, aes(x=job_title, y=salary_in_usd))
###gg plot
ggplot(data=data, aes(x=job_title, y=salary_in_usd)) + gem_point()
###gg plot
ggplot(data=data, aes(x=job_title, y=salary_in_usd)) + geom_point()
class(data$job_title)
data[work_year == 2020,]
data[data$work_year == 2020,]
data$company_location <- factor(data$company_location)
class(data$company_size
class(data$company_size)
class(data$company_size)
data$company_size <- factor(data$company_size)
class(data$company_size)
###gg plot
ggplot(data=data, aes(x=company_location, y=salary_in_usd)) + geom_point()
data$experience_level <- factor(data$experience_level)
###gg plot
ggplot(data=data, aes(x=company_location, y=salary_in_usd, color = job_title)) + geom_point()
avg(data$salary_in_usd)
mean(data$salary_in_usd)
mean(data[job_title == "Data Scientist",])
mean(data[data$job_title == "Data Scientist",])
mean(data$salary_in_usd[data$job_title == "Data Scientist",])
library(dplyr)
data %>% summarize_if(is.numeric,mean)
data %>% summarize_if(salary_in_usd,mean)
fib  <- function(n)
{
if (length(n) > 1) return(sapply(n, fib))
if (n == 1) return(1)
if (n == 2) return(1)
return(fib(n-1)+fib(n-2))
}
catalan <- function(n) {
cat <- vector("numeric", length(max(n)) + 1)
for (i in 0:max(n)) {
if (i == 0) {
cat[i+1] <- 1
} else {
cat[i+1] <- ((4*i - 2)*cat[i])/(i + 1)
}
}
return(cat[n + 1])
}
fib  <- function(n)
n <- 2
{
if (length(n) > 1) return(sapply(n, fib))
if (n == 1) return(1)
if (n == 2) return(1)
return(fib(n-1)+fib(n-2))
}
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
print(M)
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(N)
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P)
emp.data <- data.frame(
emp_id = c(1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsA
emp.data <- data.frame(
emp.data <- data.frame(
emp_id = c(1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
summary(emp.data)
str(emp.data)
sales_csv$Region <- factor(sales_csv$Region)
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5,
read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
)
list_data
getwd()
data <- read.csv("\\R Project\\data.csv")
data <- read.csv("R Project\\data.csv")
head(data)
library(ggplot2)
str(data)
data$job_title <- factor(data$job_title)
data$employment_type <- factor(data$employment_type)
data$employee_residence <- factor(data$employee_residence)
data$company_location <- factor(data$company_location)
data$company_size <- factor(data$company_size)
data$experience_level <- factor(data$experience_level)
str(data)
mean(data$salary_in_usd[data$job_title == "Data Scientist",])
mean(data$salary_in_usd)
library(dplyr)
head(data)
data2000 <- data$work_year[data$work_year == 2000,]
data2000 <- data[data$work_year == 2000,]
head(data2000)
rm(data2000)
data2020 <- data[data$work_year == 2020,]
head(data2020)
data$salary_in_usd <- data$salary_in_usd * 1.047
rm(data)
read.csv("\\R Project\\data.csv")
read.csv("R Project\\data.csv")
read.csv("R Project\\data.csv")
data <- read.csv("R Project\\data.csv")
data$job_title <- factor(data$job_title)
data$employment_type <- factor(data$employment_type)
data$employee_residence <- factor(data$employee_residence)
data$company_location <- factor(data$company_location)
data$company_size <- factor(data$company_size)
data$experience_level <- factor(data$experience_level)
data2020$salary_in_usd <- data2020$salary_in_usd * 1.047
data2020$work_year <- 2021
head(data2020)
data$work_year[work_year = 2020,] <- data2020
data$work_year[data$work_year = 2020,] <- data2020
data$work_year[data$work_year == 2020,] <- data2020
rm(data2020)
data[data$work_year == 2020, "salary_in_usd"]
data[data$work_year == 2020, "salary_in_usd"] <- data[data$work_year == 2020, "salary_in_usd"] * 1.047
[data$work_year == 2020]
data[data$work_year == 2020]
data[data$work_year == 2020,]
##now have 2020 data as 2021, need to change column name to 2021
data[data$work_year == 2020, "work_year"] <- 2021
data[data$work_year == 2020,]
head(data)
##now all 2020 data is in 2021. Now need to update 2021 data to 2022 salaries. 8.2% inflation from 21 to 22
data[data$work_year == 2021, "salary_in_usd"] <- data[data$work_year == 2021, "salary_in_usd"] * 1.082
##now have 2021 data as 2022, need to change column name to 2022
data[data$work_year == 2021, "work_year"] <- 2022
head(data)
View(data)
data[data$work_year == 2021, "work_year"]
data[data$work_year == 2022, "work_year"]
data <- read.csv("R Project\\data.csv")
library(ggplot2)
head(data)
str(data)
data$job_title <- factor(data$job_title)
data$employment_type <- factor(data$employment_type)
data$employee_residence <- factor(data$employee_residence)
data$company_location <- factor(data$company_location)
data$company_size <- factor(data$company_size)
data$experience_level <- factor(data$experience_level)
data[data$work_year == 2020, "salary_in_usd"] <- data[data$work_year == 2020, "salary_in_usd"] * 1.047
##now have 2020 data as 2021, need to change column name to 2021
data[data$work_year == 2020, "work_year"] <- 2021
##now all 2020 data is in 2021. Now need to update 2021 data to 2022 salaries. 8.2% inflation from 21 to 22
data[data$work_year == 2021, "salary_in_usd"] <- data[data$work_year == 2021, "salary_in_usd"] * 1.082
##now have 2021 data as 2022, need to change column name to 2022
data[data$work_year == 2021, "work_year"] <- 2022
head(data)
str(data)
data$remote_ratio <- factor(data$remote_ratio)
mean(data$salary_in_usd[data$job_title == "Data Scientist",])
library(dplyr);
data %>% rownames_to_column(var="row") %>%    mutate(row = gsub("([A-Za-z]*).*", "\\1", row)) %>%    group_by(row) %>%
summarise(mean_salary_in_usd = mean(mean_salary_in_usd))
rownames(data$job_title)
head(data)
rownames(data)
mean(data$salary_in_usd[job_title == "Data Scientist",])
mean(data$salary_in_usd[job_title == "Data Scientist"])
mean(data$salary_in_usd[data$job_title == "Data Scientist"])
mean(data$salary_in_usd)
mean(data$salary_in_usd[data$job_title])
View(data)
library(ggplot2)
x <- c("a","b","c","d","e")
x[c(1,5)]
Games[1:3,6:10]
plot <- ggplot(data=data, aes(x=company_size, y=salary, color = job_title))
plot+geom_point
plot+geom_point()
##at this point, all salaries are adjusted to 2022 through September because of inflation
##would like to now group job titles into different buckets, based on similar averages, so we can
##bucket them into groups. Too many job titles currently in file to make sense of anything.
head(data)
plot <- ggplot(data=data, aes(x=company_size, y=salary, color = experience_level))
plot+geom_point()
plot+geom_line()
plot <- ggplot(data=data, aes(x=experience_level, y=salary, color = company_size))
plot+geom_line()
max(data$salary_in_usd)
data[salary_in_usd == 649200,]
data[data$salary_in_usd == 649200,]
